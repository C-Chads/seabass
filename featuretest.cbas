


//TEST 2: compiletime math
codegen int have_failed = 0;

fn codegen testmath:
    int a = 7
    int b = 23
    int c = a + b
    if(c != a + b)
        __builtin_puts("Failed integer addition test 1");
        have_failed = 1
    end
    
    double q = 23
    double q2 = 23
    double q3 = q + q2
    if(q3 != q + q2)
        __builtin_puts("Failed double math test 1");
        have_failed = 1
    end
    
    a = -23;
    b = 23;
    if(a + b != 0)
        __builtin_puts("Failed addition test 2- should be zero");
        have_failed = 1
    end
    byte* p = __builtin_malloc(512);
    if(p == 0)
        __builtin_puts("Failed malloc");
        have_failed = 1
    end
    __builtin_free(p);
    
    
    a = 27 % 3;
    if(a != 0)
        __builtin_puts("Failed modulo 1");
        have_failed = 1
    end
    a = 27 % 2;
    if(a != 1)
        __builtin_puts("Failed modulo 2");
        have_failed = 1
    end
end

fn codegen test_loops:
    for(0,0,0)
        __builtin_puts("Failed for(0,0,0)");
        have_failed = 1
    end
    for(1,1,1)
        goto after_for_111
    end
    __builtin_puts("Failed for(1,1,1)");
    have_failed = 1;
    :after_for_111
    i64 i
    i64 j = 0
    //if(1)
    for(i = 0, i < 20; i++)
        __builtin_puts("You should see this print! (for i = 0 to 3 inclusive, 4 times)");
        if(i == 3)
            j--;
            break
        end
        j++;
    end
    if(i != 3 || j != (3-1))
        __builtin_puts("Failed Loop Test 1");
        char[50] buf
        __builtin_utoa(buf, i);
        __builtin_puts(buf);
        __builtin_utoa(buf, j);
        __builtin_puts(buf);
        have_failed = 1
    end
    //end
    i = 12;
    j = -13;
    while(i > 0)
        i = i - 1;
        j--;
    end
    if(i != 0 || j != -25)
        __builtin_puts("Failed Loop Test 2");
        char[50] buf
        __builtin_itoa(buf, i);
        __builtin_puts(buf);
        __builtin_itoa(buf, j);
        __builtin_puts(buf);
        have_failed = 1
    end 
    
    i = 12;
    j = -13;
    while(1)
        i = i - 1;
        j--;
        if(i == 0)
            break
        end
    end
    if(i != 0 || j != -25)
        __builtin_puts("Failed Loop Test 2");
        char[50] buf
        __builtin_itoa(buf, i);
        __builtin_puts(buf);
        __builtin_itoa(buf, j);
        __builtin_puts(buf);
        have_failed = 1
    end
    
    i = 23;
    j = 0;
    while(1)
        i++
        while(1)
           j++;
           if(i == j)
                break
           end
        end
        if(i == 40)
            break
        end
    end
    
    
    if(i != j || i != 40)
        __builtin_puts("Failed Loop Test 3");
        char[50] buf
        __builtin_itoa(buf, i);
        __builtin_puts(buf);
        __builtin_itoa(buf, j);
        __builtin_puts(buf);
        have_failed = 1
    end

    
    i = 23;
    j = 0;
    while(1)
        i++
        while(1)
           j++;
           if(i == j)
                goto out1
           end
        end
        :out1
        if(i == 40)
            jump out2
        end
    end
    :out2
    i64 k
    for(k = 0, k < i, k++)
        ;
    end
    
    if(i != j || i != 40 || i != k)
        __builtin_puts("Failed Loop Test 3");
        char[50] buf
        __builtin_itoa(buf, i);
        __builtin_puts(buf);
        __builtin_itoa(buf, j);
        __builtin_puts(buf);
        have_failed = 1
    end



end


fn codegen codegen_main:
    __builtin_puts("TESTING BASIC ARITHMETIC");
    testmath();
    test_loops();
    if(!have_failed)
        __builtin_puts("Success!!!!");
    else
        __builtin_puts("------------FAILED--------------------");
    end
end
