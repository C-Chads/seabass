


//TEST 2: compiletime math
codegen int have_failed = 0;

fn codegen testmath:
    int a = 7
    int b = 23
    int c = a + b
    if(c != a + b)
        __builtin_puts("Failed integer addition test 1");
        have_failed = 1
    end
    
    double q = 23
    double q2 = 23
    double q3 = q + q2
    if(q3 != q + q2)
        __builtin_puts("Failed double math test 1");
        have_failed = 1
    end
    
    a = -23;
    b = 23;
    if(a + b != 0)
        __builtin_puts("Failed addition test 2- should be zero");
        have_failed = 1
    end
    byte* p = __builtin_malloc(512);
    if(p == 0)
        __builtin_puts("Failed malloc");
        have_failed = 1
    end
    __builtin_free(p);
    
    
    a = 27 % 3;
    if(a != 0)
        __builtin_puts("Failed modulo 1");
        have_failed = 1
    end
    a = 27 % 2;
    if(a != 1)
        __builtin_puts("Failed modulo 2");
        have_failed = 1
    end
end

fn codegen test_loops:
    for(0,0,0)
        __builtin_puts("Failed for(0,0,0)");
        have_failed = 1
    end
    for(1,1,1)
        goto after_for_111
    end
    __builtin_puts("Failed for(1,1,1)");
    have_failed = 1;
    :after_for_111
    i64 i
    //if(1)
    for(i = 0, i < 20; i++)
    ;
        __builtin_puts("You should see this print!");
        if(i == 3)
            break
        end
    end
    if(i != 3)
        __builtin_puts("Failed Loop Test 1");
        char[50] buf
        __builtin_utoa(buf, i);
        __builtin_puts(buf);
        have_failed = 1
    end
    //end




end


fn codegen codegen_main:
    __builtin_puts("TESTING BASIC ARITHMETIC");
    testmath();
    test_loops();
    if(!have_failed)
        __builtin_puts("Success!!!!");
    else
        __builtin_puts("------------FAILED--------------------");
    end
end
