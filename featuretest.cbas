


//TEST 2: compiletime math
codegen int have_failed = 0;

fn codegen testmath:
    int a = 7
    int b = 23
    int c = a + b
    if(c != a + b)
        __builtin_puts("Failed integer addition test 1");
        have_failed = 1
    end
    
    double q = 23
    double q2 = 23
    double q3 = q + q2
    if(q3 != q + q2)
        __builtin_puts("Failed double math test 1");
        have_failed = 1
    end
    
    a = -23;
    b = 23;
    if(a + b != 0)
        __builtin_puts("Failed addition test 2- should be zero");
        have_failed = 1
    end
    byte* p = __builtin_malloc(512);
    if(p == 0)
        __builtin_puts("Failed malloc");
        have_failed = 1
    end
    __builtin_free(p);
    
    
    a = 27 % 3;
    if(a != 0)
        __builtin_puts("Failed modulo 1");
        have_failed = 1
    end
    a = 27 % 2;
    if(a != 1)
        __builtin_puts("Failed modulo 2");
        have_failed = 1
    end
end

fn codegen test_loops:
    for(0,0,0)
        __builtin_puts("Failed for(0,0,0)");
        have_failed = 1
    end
    for(1,1,1)
        goto after_for_111
    end
    __builtin_puts("Failed for(1,1,1)");
    have_failed = 1;
    :after_for_111
    i64 i
    i64 j = 0
    i64 k
    //if(1)
    k = 0
    for(i = 0, i < 20; i++)
        k++;
        if(i == 3)
            j--;
            break
        end
        j++;
    end
    if(i != 3 || j != (3-1) || k != 4)
        __builtin_puts("Failed Loop Test 1");
        char[50] buf
        __builtin_utoa(buf, i);
        __builtin_puts(buf);
        __builtin_utoa(buf, j);
        __builtin_puts(buf);
        have_failed = 1
    end
    //end
    i = 12;
    j = -13;
    while(i > 0)
        i = i - 1;
        j--;
    end
    if(i != 0 || j != -25)
        __builtin_puts("Failed Loop Test 2");
        char[50] buf
        __builtin_itoa(buf, i);
        __builtin_puts(buf);
        __builtin_itoa(buf, j);
        __builtin_puts(buf);
        have_failed = 1
    end 
    
    i = 12;
    j = -13;
    while(1)
        i = i - 1;
        j--;
        if(i == 0)
            if(1)
            if(1)
            if(1)
            if(1)
                break
            end
            end
            end
            end
        end
    end
    if(i != 0 || j != -25)
        __builtin_puts("Failed Loop Test 2");
        char[50] buf
        __builtin_itoa(buf, i);
        __builtin_puts(buf);
        __builtin_itoa(buf, j);
        __builtin_puts(buf);
        have_failed = 1
    end
    
    i = 23;
    j = 0;
    while(1)
        i++
        while(1)
           j++;
           if(i == j)
                break
           end
        end
        if(i == 40)
            break
        end
    end
    
    
    if(i != j || i != 40)
        __builtin_puts("Failed Loop Test 3");
        char[50] buf
        __builtin_itoa(buf, i);
        __builtin_puts(buf);
        __builtin_itoa(buf, j);
        __builtin_puts(buf);
        have_failed = 1
    end

    
    i = 23;
    j = 0;
    while(1)
        i++
        while(1)
           j++;
           if(i == j)
                goto out1
           end
        end
        :out1
        if(i == 40)
            jump out2
        end
    end
    :out2
    for(k = 0, k < i, k++)
        ;
    end
    
    if(i != j || i != 40 || i != k)
        __builtin_puts("Failed Loop Test 3");
        char[50] buf
        __builtin_itoa(buf, i);
        __builtin_puts(buf);
        __builtin_itoa(buf, j);
        __builtin_puts(buf);
        have_failed = 1
    end



end

fn codegen test_switch:
    i64 i = 0
    i64 j = 0
    i64 k = 0
    switch(1+2+3) l0 l1 l2 l3 l4 l5 l6 l7 l8 l9 l10;
    
    
    
    :l0 i = 1 goto l_last
    :l1 i = 1 goto l_last
    :l2 i = 1 goto l_last
    :l3 i = 1 goto l_last
    :l4 i = 1 goto l_last
    :l5 i = 1 goto l_last
    :l6 goto l_last
    :l7 i = 1 goto l_last
    :l8 i = 1 goto l_last
    :l9 i = 1 goto l_last
    :l10 i = 1 goto l_last
    :l11 i = 1 goto l_last
    :l12 i = 1 goto l_last
    :l13 i = 1 goto l_last
    :l14 i = 1 goto l_last
    
    :l_last
    if(i != 0)
        have_failed = 1;
        __builtin_puts("Failed switch test")
    end
    
    return
end

fn codegen test_writefile_readfile:
    __builtin_open_ofile("test.out");
    __builtin_emit("1234567890",11);
    __builtin_close_ofile();
    u64[1] len
    len[0] = 0
    
    char* p = __builtin_read_file("test.out",len);
    if(len[0] != 11 || p == 0)
        __builtin_puts("Failed File I/O test - Could not read file.");
        have_failed = 1;
    end
    if(p strneq "1234567890")
        __builtin_puts("Failed File I/O test - File contents failure.");
        have_failed = 1;
    end
    __builtin_free(p);
end


fn codegen codegen_main:
    __builtin_puts("TESTING BASIC ARITHMETIC");
    testmath();
    __builtin_puts("TESTING LOOPS");
    test_loops();
    __builtin_puts("TESTING SWITCH");
    test_switch;
    __builtin_puts("TESTING FILES");
    test_writefile_readfile();
    if(!have_failed)
        __builtin_puts("Success!!!!");
    else
        __builtin_puts("------------FAILED--------------------");
        __builtin_exit(1);
    end
end
