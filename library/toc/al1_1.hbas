

#guard OPENAL_1_1

#include <toc/inlinec.hbas>

data codegen string OPENAL_PREFIX "
#include <AL/alc.h>
#include <AL/al.h>
    #define MKALCONST(t,x) const t __CBAS__AL_##x = AL_##x;
    #define MKALCCONST(t,x) const t __CBAS__ALC_##x = ALC_##x;
MKALCONST(unsigned,INVALID_VALUE)
MKALCONST(unsigned,INVALID_OPERATION)
MKALCONST(unsigned,INVALID_NAME)
MKALCONST(unsigned,INVALID_ENUM)
MKALCONST(unsigned,OUT_OF_MEMORY)
MKALCONST(unsigned,NO_ERROR)
//buffer
MKALCONST(unsigned,FREQUENCY)
MKALCONST(unsigned,BITS)
MKALCONST(unsigned,CHANNELS)
MKALCONST(unsigned,SIZE)
MKALCONST(unsigned,DATA)
//from alSourcef
MKALCONST(unsigned,PITCH)
MKALCONST(unsigned,GAIN)
MKALCONST(unsigned,MIN_GAIN)
MKALCONST(unsigned,MAX_GAIN)
MKALCONST(unsigned,MAX_DISTANCE)
MKALCONST(unsigned,ROLLOFF_FACTOR)
MKALCONST(unsigned,CONE_OUTER_GAIN)
MKALCONST(unsigned,CONE_INNER_ANGLE)
MKALCONST(unsigned,CONE_OUTER_ANGLE)
MKALCONST(unsigned,REFERENCE_DISTANCE)
//from alSource3f and fv
MKALCONST(unsigned,POSITION)
MKALCONST(unsigned,VELOCITY)
MKALCONST(unsigned,DIRECTION)
//from alSourcei
MKALCONST(unsigned,SOURCE_RELATIVE)
MKALCONST(unsigned,SOURCE_TYPE)
MKALCONST(unsigned,LOOPING)
MKALCONST(unsigned,BUFFER)
MKALCONST(unsigned,SOURCE_STATE)
//from alGetSourcei
MKALCONST(unsigned,BUFFERS_QUEUED)
MKALCONST(unsigned,BUFFERS_PROCESSED)
MKALCONST(unsigned,SEC_OFFSET)
MKALCONST(unsigned,SAMPLE_OFFSET)
MKALCONST(unsigned,BYTE_OFFSET)
//from alListenerfv
MKALCONST(unsigned,ORIENTATION)
//state functions
MKALCONST(unsigned,DOPPLER_FACTOR)
MKALCONST(unsigned,SPEED_OF_SOUND)
MKALCONST(unsigned,DISTANCE_MODEL)

MKALCCONST(unsigned,FREQUENCY)
MKALCCONST(unsigned,MONO_SOURCES)
MKALCCONST(unsigned,STEREO_SOURCES)
MKALCCONST(unsigned,REFRESH)
MKALCCONST(unsigned,SYNC)

MKALCCONST(unsigned,NO_ERROR)
MKALCCONST(unsigned,INVALID_DEVICE)
MKALCCONST(unsigned,INVALID_CONTEXT)
MKALCCONST(unsigned,INVALID_ENUM)
MKALCCONST(unsigned,INVALID_VALUE)
MKALCCONST(unsigned,OUT_OF_MEMORY)

";
#define ALboolean byte
#define ALchar sbyte
#define ALbyte sbyte
#define ALubyte byte
#define ALshort short
#define ALushort ushort
#define ALint int
#define ALuint uint
#define ALsizei uint
#define ALenum uint
#define ALfloat f32
#define ALdouble f64

#define ALCboolean byte
#define ALCchar sbyte
#define ALCbyte sbyte
#define ALCubyte byte
#define ALCshort short
#define ALCushort ushort
#define ALCint int
#define ALCuint uint
#define ALCsizei uint
#define ALCenum uint
#define ALCfloat f32
#define ALCdouble f64

//context management...
fn inline alcCreateContext(byte* dev, int* attrlist)->byte*:
    @inline_C "return (unsigned char*)alcCreateContext(
        (ALCcontext*)$dev,
        $attrlist
    );"
end
fn inline alcMakeContextCurrent(byte* ctx)->byte:
    @inline_C "return alcMakeContextCurrent((ALCcontext*)$ctx);"
end
fn inline alcProcessContext(byte* ctx):
    @inline_C "alcProcessContext((ALCcontext*)$ctx);"
end
fn inline alcSuspendContext(byte* ctx):
    @inline_C "alcSuspendContext((ALCcontext*)$ctx);"
end
fn inline alcDestroyContext(byte* ctx):
    @inline_C "alcDestroyContext((ALCcontext*)$ctx);"
end
fn inline alcGetCurrentContext()->byte*:
    asm("return (unsigned char*)alcGetCurrentContext();")
end
fn inline alcGetContextsDevice(byte* ctx)->byte*:
    @inline_C "return (unsigned char*)alcGetContextsDevice((ALCcontext*)$ctx);"
end
fn inline alcGetError(byte* dev)->ALenum:
    @inline_C "return alcGetError((ALCdevice*)$dev);"
end
fn inline alGetError()->ALenum:
    asm("return alGetError();")
end
fn inline alcOpenDevice(byte* devname)->byte*:
    @inline_C "return (unsigned char*)alcOpenDevice((ALCchar*)$devname);"
end
fn inline alcCloseDevice(byte* dev)->ALboolean:
    @inline_C "return alcCloseDevice((ALCdevice*)$dev);"
end

fn inline alcIsExtensionPresent(byte* dev, byte* extname)->ALboolean:
    @inline_C "return alcIsExtensionPresent((ALCdevice*)$dev, (ALCchar*)$extname);"
end
fn inline alIsExtensionPresent(byte* extname)->ALboolean:
    @inline_C "return alIsExtensionPresent((ALchar*)$extname);"
end

fn inline alcGetProcAddress(byte* dev, byte* fname)->byte*:
    @inline_C "return alcGetProcAddress((ALCdevice*)$dev, (ALCchar*)$fname);"
end

fn inline alGetProcAddress(byte* fname)->byte*:
    @inline_C "return alGetProcAddress((ALchar*)$fname);"
end


fn inline alcGetEnumValue(byte* dev, byte* fname)->ALenum:
    @inline_C "return alcGetEnumValue((ALCdevice*)$dev, (ALCchar*)$fname);"
end
fn inline alGetEnumValue(byte* fname)->ALenum:
    @inline_C "return alGetEnumValue((ALchar*)$fname);"
end

fn inline alcGetString(byte* dev, ALCenum param)->byte*:
    @inline_C "return (unsigned char*)alcGetString((ALCdevice*)$dev, $param);"
end

fn inline alcGetIntegerv(byte* dev, ALCenum param, ALCsizei sz, ALCint* d):
    @inline_C "alcGetIntegerv((ALCdevice*)$dev, $param, $sz, $d);"
end
fn inline alcCaptureOpenDevice(byte* devname, ALCuint freq, ALCenum f, ALCsizei bufsz)->byte*:
    @inline_C "return (unsigned char*)alcCaptureOpenDevice(
        (ALCchar*)$devname,
        $freq,
        $f,
        $bufsz
    );"
end
fn inline alcCaptureCloseDevice(byte* dev)->ALboolean:
    @inline_C "return alcCaptureCloseDevice((ALCdevice*)$dev);"
end

fn inline alcCaptureStart(byte* dev):
    @inline_C "alcCaptureStart((ALCdevice*)$dev);"
end

fn inline alcCaptureStop(byte* dev):
    @inline_C "alcCaptureStop((ALCdevice*)$dev);"
end
fn inline alcCaptureSamples(byte* dev, byte* buf, ALCsizei samples):
    @inline_C "alcCaptureSamples((ALCdevice*)$dev, $buf, $samples);"
end






fn inline alGenBuffers(ALsizei n, ALuint* buffers):
    @inline_C "alGenBuffers($n, $buffers);"
end
fn inline alDeleteBuffers(ALsizei n, ALuint* buffers):
    @inline_C "alDeleteBuffers($n, $buffers);"
end
fn inline alIsBuffer(ALuint b)->ALboolean:
    @inline_C "return alIsBuffer($b);"
end
fn inline alBufferData( ALuint b, ALenum f, byte *d, ALsizei size, ALsizei freq):
    @inline_C "return alBufferData($b, $f, $d, $size, $freq);"
end
