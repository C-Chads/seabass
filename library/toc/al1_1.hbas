

#guard OPENAL_1_1

#include <toc/inlinec.hbas>

data codegen string AL_1_1_PREFIX "
#include <AL/alc.h>
#include <AL/al.h>
#define MKALCONST(t,x) const t __CBAS__AL_##x = AL_##x;
#define MKALCCONST(t,x) const t __CBAS__ALC_##x = ALC_##x;

MKALCONST(unsigned,INVALID_VALUE)
MKALCONST(unsigned,INVALID_OPERATION)
MKALCONST(unsigned,INVALID_NAME)
MKALCONST(unsigned,INVALID_ENUM)
MKALCONST(unsigned,OUT_OF_MEMORY)
MKALCONST(unsigned,NO_ERROR)
MKALCONST(unsigned,FREQUENCY)
MKALCONST(unsigned,BITS)
MKALCONST(unsigned,CHANNELS)
MKALCONST(unsigned,SIZE)
MKALCONST(unsigned,DATA)
MKALCONST(unsigned,PITCH)
MKALCONST(unsigned,GAIN)
MKALCONST(unsigned,MIN_GAIN)
MKALCONST(unsigned,MAX_GAIN)
MKALCONST(unsigned,MAX_DISTANCE)
MKALCONST(unsigned,ROLLOFF_FACTOR)
MKALCONST(unsigned,CONE_OUTER_GAIN)
MKALCONST(unsigned,CONE_INNER_ANGLE)
MKALCONST(unsigned,CONE_OUTER_ANGLE)
MKALCONST(unsigned,REFERENCE_DISTANCE)
MKALCONST(unsigned,POSITION)
MKALCONST(unsigned,VELOCITY)
MKALCONST(unsigned,DIRECTION)
MKALCONST(unsigned,SOURCE_RELATIVE)
MKALCONST(unsigned,SOURCE_TYPE)
MKALCONST(unsigned,LOOPING)
MKALCONST(unsigned,BUFFER)
MKALCONST(unsigned,SOURCE_STATE)
MKALCONST(unsigned,BUFFERS_QUEUED)
MKALCONST(unsigned,BUFFERS_PROCESSED)
MKALCONST(unsigned,SEC_OFFSET)
MKALCONST(unsigned,SAMPLE_OFFSET)
MKALCONST(unsigned,BYTE_OFFSET)
MKALCONST(unsigned,ORIENTATION)
MKALCONST(unsigned,DOPPLER_FACTOR)
MKALCONST(unsigned,SPEED_OF_SOUND)
MKALCONST(unsigned,DISTANCE_MODEL)
MKALCCONST(unsigned,FREQUENCY)
MKALCCONST(unsigned,MONO_SOURCES)
MKALCCONST(unsigned,STEREO_SOURCES)
MKALCCONST(unsigned,REFRESH)
MKALCCONST(unsigned,SYNC)
MKALCCONST(unsigned,NO_ERROR)
MKALCCONST(unsigned,INVALID_DEVICE)
MKALCCONST(unsigned,INVALID_CONTEXT)
MKALCCONST(unsigned,INVALID_ENUM)
MKALCCONST(unsigned,INVALID_VALUE)
MKALCCONST(unsigned,OUT_OF_MEMORY)

";
#define ALboolean byte
#define ALchar sbyte
#define ALbyte sbyte
#define ALubyte byte
#define ALshort short
#define ALushort ushort
#define ALint int
#define ALuint uint
#define ALsizei uint
#define ALenum uint
#define ALfloat f32
#define ALdouble f64

#define ALCboolean byte
#define ALCchar sbyte
#define ALCbyte sbyte
#define ALCubyte byte
#define ALCshort short
#define ALCushort ushort
#define ALCint int
#define ALCuint uint
#define ALCsizei uint
#define ALCenum uint
#define ALCfloat f32
#define ALCdouble f64

//context management...
fn inline alcCreateContext(byte* dev, int* attrlist)->byte*:
    @inline_C "return (unsigned char*)alcCreateContext(
        (ALCcontext*)$dev,
        $attrlist
    );"
end
fn inline alcMakeContextCurrent(byte* ctx)->byte:
    @inline_C "return alcMakeContextCurrent((ALCcontext*)$ctx);"
end
fn inline alcProcessContext(byte* ctx):
    @inline_C "alcProcessContext((ALCcontext*)$ctx);"
end
fn inline alcSuspendContext(byte* ctx):
    @inline_C "alcSuspendContext((ALCcontext*)$ctx);"
end
fn inline alcDestroyContext(byte* ctx):
    @inline_C "alcDestroyContext((ALCcontext*)$ctx);"
end
fn inline alcGetCurrentContext()->byte*:
    asm("return (unsigned char*)alcGetCurrentContext();")
end
fn inline alcGetContextsDevice(byte* ctx)->byte*:
    @inline_C "return (unsigned char*)alcGetContextsDevice((ALCcontext*)$ctx);"
end
fn inline alcGetError(byte* dev)->ALenum:
    @inline_C "return alcGetError((ALCdevice*)$dev);"
end
fn inline alGetError()->ALenum:
    asm("return alGetError();")
end
fn inline alcOpenDevice(byte* devname)->byte*:
    @inline_C "return (unsigned char*)alcOpenDevice((ALCchar*)$devname);"
end
fn inline alcCloseDevice(byte* dev)->ALboolean:
    @inline_C "return alcCloseDevice((ALCdevice*)$dev);"
end

fn inline alcIsExtensionPresent(byte* dev, byte* extname)->ALboolean:
    @inline_C "return alcIsExtensionPresent((ALCdevice*)$dev, (ALCchar*)$extname);"
end
fn inline alIsExtensionPresent(byte* extname)->ALboolean:
    @inline_C "return alIsExtensionPresent((ALchar*)$extname);"
end

fn inline alcGetProcAddress(byte* dev, byte* fname)->byte*:
    @inline_C "return alcGetProcAddress((ALCdevice*)$dev, (ALCchar*)$fname);"
end

fn inline alGetProcAddress(byte* fname)->byte*:
    @inline_C "return alGetProcAddress((ALchar*)$fname);"
end


fn inline alcGetEnumValue(byte* dev, byte* fname)->ALenum:
    @inline_C "return alcGetEnumValue((ALCdevice*)$dev, (ALCchar*)$fname);"
end
fn inline alGetEnumValue(byte* fname)->ALenum:
    @inline_C "return alGetEnumValue((ALchar*)$fname);"
end

fn inline alcGetString(byte* dev, ALCenum param)->byte*:
    @inline_C "return (unsigned char*)alcGetString((ALCdevice*)$dev, $param);"
end
fn inline alGetString(ALCenum param)->byte*:
    @inline_C "return (unsigned char*)alGetString($param);"
end

fn inline alcGetIntegerv(byte* dev, ALCenum param, ALCsizei sz, ALCint* d):
    @inline_C "alcGetIntegerv((ALCdevice*)$dev, $param, $sz, $d);"
end
fn inline alcCaptureOpenDevice(byte* devname, ALCuint freq, ALCenum f, ALCsizei bufsz)->byte*:
    @inline_C "return (unsigned char*)alcCaptureOpenDevice(
        (ALCchar*)$devname,
        $freq,
        $f,
        $bufsz
    );"
end
fn inline alcCaptureCloseDevice(byte* dev)->ALboolean:
    @inline_C "return alcCaptureCloseDevice((ALCdevice*)$dev);"
end

fn inline alcCaptureStart(byte* dev):
    @inline_C "alcCaptureStart((ALCdevice*)$dev);"
end

fn inline alcCaptureStop(byte* dev):
    @inline_C "alcCaptureStop((ALCdevice*)$dev);"
end
fn inline alcCaptureSamples(byte* dev, byte* buf, ALCsizei samples):
    @inline_C "alcCaptureSamples((ALCdevice*)$dev, $buf, $samples);"
end






fn inline alGenBuffers(ALsizei n, ALuint* buffers):
    @inline_C "alGenBuffers($n, $buffers);"
end
fn inline alDeleteBuffers(ALsizei n, ALuint* buffers):
    @inline_C "alDeleteBuffers($n, $buffers);"
end
fn inline alIsBuffer(ALuint b)->ALboolean:
    @inline_C "return alIsBuffer($b);"
end
fn inline alBufferData( ALuint b, ALenum f, byte *d, ALsizei size, ALsizei freq):
    @inline_C "alBufferData($b, $f, $d, $size, $freq);"
end

fn inline alBufferf( ALuint b, Alenum param, ALfloat v):
    @inline_C "alBufferf($b, $param, $v);"
end
fn inline alBuffer3f( ALuint b, Alenum param, ALfloat v1, ALfloat v2, ALfloat v3):
    @inline_C "alBuffer3f($b, $param, $v1, $v2, $v3);"
end
fn inline alBufferfv( ALuint b, Alenum param, ALfloat* v):
    @inline_C "alBufferfv($b, $param, $v);"
end


fn inline alBufferi( ALuint b, Alenum param, ALint v):
    @inline_C "alBufferi($b, $param, $v);"
end
fn inline alBuffer3i( ALuint b, Alenum param, ALint v1, ALint v2, ALint v3):
    @inline_C "alBuffer3i($b, $param, $v1, $v2, $v3);"
end
fn inline alBufferiv( ALuint b, Alenum param, ALint* v):
    @inline_C "alBufferiv($b, $param, $v);"
end


fn inline alGetBufferf( ALuint b, Alenum param, ALfloat* v):
    @inline_C "alGetBufferf($b, $param, $v);"
end
fn inline alGetBuffer3f( ALuint b, Alenum param, ALfloat* v1, ALfloat* v2, ALfloat* v3):
    @inline_C "alGetBuffer3f($b, $param, $v1, $v2, $v3);"
end
fn inline alGetBufferfv( ALuint b, Alenum param, ALfloat* v):
    @inline_C "alGetBufferfv($b, $param, $v);"
end


fn inline alGetBufferi( ALuint b, Alenum param, ALint* v):
    @inline_C "alGetBufferi($b, $param, $v);"
end
fn inline alGetBuffer3i( ALuint b, Alenum param, ALint* v1, ALint* v2, ALint* v3):
    @inline_C "alGetBuffer3i($b, $param, $v1, $v2, $v3);"
end
fn inline alGetBufferiv( ALuint b, Alenum param, ALint* v):
    @inline_C "alGetBufferiv($b, $param, $v);"
end
fn inline alGenSources( ALsizei n, ALuint* s):
    @inline_C "alGenSources($n, $s);"
end

fn inline alDeleteSources( ALsizei n, ALuint* s):
    @inline_C "alDeleteSources($n, $s);"
end
fn inline alIsSource(ALuint b)->ALboolean:
    @inline_C "return alIsSource($b);"
end

//alSource
fn inline alSourcef( ALuint b, Alenum param, ALfloat v):
    @inline_C "alSourcef($b, $param, $v);"
end
fn inline alSource3f( ALuint b, Alenum param, ALfloat v1, ALfloat v2, ALfloat v3):
    @inline_C "alSource3f($b, $param, $v1, $v2, $v3);"
end
fn inline alSourcefv( ALuint b, Alenum param, ALfloat* v):
    @inline_C "alSourcefv($b, $param, $v);"
end

fn inline alSourcei( ALuint b, Alenum param, ALint v):
    @inline_C "alSourcei($b, $param, $v);"
end
fn inline alSource3i( ALuint b, Alenum param, ALint v1, ALint v2, ALint v3):
    @inline_C "alSource3i($b, $param, $v1, $v2, $v3);"
end
fn inline alSourceiv( ALuint b, Alenum param, ALint* v):
    @inline_C "alSourceiv($b, $param, $v);"
end



fn inline alGetSourcef( ALuint b, Alenum param, ALfloat* v):
    @inline_C "alGetSourcef($b, $param, $v);"
end
fn inline alGetSource3f( ALuint b, Alenum param, ALfloat* v1, ALfloat* v2, ALfloat* v3):
    @inline_C "alGetSource3f($b, $param, $v1, $v2, $v3);"
end
fn inline alGetSourcefv( ALuint b, Alenum param, ALfloat* v):
    @inline_C "alGetSourcefv($b, $param, $v);"
end

fn inline alGetSourcei( ALuint b, Alenum param, ALint* v):
    @inline_C "alGetSourcei($b, $param, $v);"
end
fn inline alGetSource3i( ALuint b, Alenum param, ALint* v1, ALint* v2, ALint* v3):
    @inline_C "alGetSource3i($b, $param, $v1, $v2, $v3);"
end
fn inline alGetSourceiv( ALuint b, Alenum param, ALint* v):
    @inline_C "alGetSourceiv($b, $param, $v);"
end




fn inline alSourcePlay(ALuint b):
    @inline_C "return alSourcePlay($b);"
end
fn inline alSourcePlayv( ALsizei n, ALuint* s):
    @inline_C "alSourcePlayv($n, $s);"
end

fn inline alSourcePause(ALuint b):
    @inline_C "return alSourcePause($b);"
end
fn inline alSourcePausev( ALsizei n, ALuint* s):
    @inline_C "alSourcePausev($n, $s);"
end

fn inline alSourceStop(ALuint b):
    @inline_C "return alSourceStop($b);"
end
fn inline alSourceStopv( ALsizei n, ALuint* s):
    @inline_C "alSourceStopv($n, $s);"
end

fn inline alSourceRewind(ALuint b):
    @inline_C "return alSourceRewind($b);"
end
fn inline alSourceRewindv( ALsizei n, ALuint* s):
    @inline_C "alSourceRewindv($n, $s);"
end

fn inline alSourceQueueBuffers(
    ALuint src,
    ALsizei n,
    ALuint* b
):
    @inline_C "alSourceQueueBuffers($src, $n, $b);"
end

fn inline alSourceUnqueueBuffers(
    ALuint src,
    ALsizei n,
    ALuint* b
):
    @inline_C "alSourceUnqueueBuffers($src, $n, $b);"
end

//listener


//alSource
fn inline alListenerf( Alenum param, ALfloat v):
    @inline_C "alListenerf($param, $v);"
end
fn inline alListener3f( Alenum param, ALfloat v1, ALfloat v2, ALfloat v3):
    @inline_C "alListener3f($param, $v1, $v2, $v3);"
end
fn inline alListenerfv(  Alenum param, ALfloat* v):
    @inline_C "alListenerfv($param, $v);"
end

fn inline alListeneri(Alenum param, ALint v):
    @inline_C "alListeneri($param, $v);"
end
fn inline alListener3i(Alenum param, ALint v1, ALint v2, ALint v3):
    @inline_C "alListener3i($param, $v1, $v2, $v3);"
end
fn inline alListeneriv(Alenum param, ALint* v):
    @inline_C "alListeneriv($param, $v);"
end



fn inline alGetListenerf(Alenum param, ALfloat* v):
    @inline_C "alGetListenerf($param, $v);"
end
fn inline alGetListener3f( Alenum param, ALfloat* v1, ALfloat* v2, ALfloat* v3):
    @inline_C "alGetListener3f($param, $v1, $v2, $v3);"
end
fn inline alGetListenerfv(Alenum param, ALfloat* v):
    @inline_C "alGetListenerfv($param, $v);"
end

fn inline alGetListeneri(Alenum param, ALint* v):
    @inline_C "alGetListeneri($param, $v);"
end
fn inline alGetListener3i(Alenum param, ALint* v1, ALint* v2, ALint* v3):
    @inline_C "alGetListener3i($param, $v1, $v2, $v3);"
end
fn inline alGetListeneriv(Alenum param, ALint* v):
    @inline_C "alGetListeneriv($param, $v);"
end

fn inline alEnable(ALenum b):
    @inline_C "alEnable($b);"
end

fn inline alDisable(ALenum b):
    @inline_C "alDisable($b);"
end

fn inline alIsEnabled(ALenum b)->ALboolean:
    @inline_C "return alIsEnabled($b);"
end
fn inline alGetBoolean(ALenum b)->ALboolean:
    @inline_C "return alGetBoolean($b);"
end
fn inline alGetDouble(ALenum b)->ALdouble:
    @inline_C "return alGetDouble($b);"
end
fn inline alGetFloat(ALenum b)->ALfloat:
    @inline_C "return alGetFloat($b);"
end
fn inline alGetInteger(ALenum b)->ALint:
    @inline_C "return alGetInteger($b);"
end

fn inline alGetBooleanv(Alenum param, ALboolean* v):
    @inline_C "alGetBooleanv($param, $v);"
end

fn inline alGetDoublev(Alenum param, ALdouble* v):
    @inline_C "alGetDoublev($param, $v);"
end

fn inline alGetFloatv(Alenum param, ALfloat* v):
    @inline_C "alGetFloatv($param, $v);"
end


fn inline alGetIntegerv(Alenum param, ALint* v):
    @inline_C "alGetIntegerv($param, $v);"
end
fn inline alDistanceModel(ALenum b):
    @inline_C "alDistanceModel($b);"
end

fn inline alDopplerFactor(ALfloat b):
    @inline_C "alDopplerFactor($b);"
end

fn inline alSpeedOfSound(ALfloat b):
    @inline_C "alSpeedOfSound($b);"
end

