
#guard compiletime_universal_ast_common_impl_patterns_DMHSW

#include "cgtoken_manip_tools.hbas"
#include "cg_uast.hbas"

/*
    COMMON IMPLEMENTATION PATTERNS FOR THE UNIVERSAL AST
    
    Mostly just constants...
*/

codegen u64 cg_uast_coord_parent = (0xf<<(64-4)) | 0;
codegen u64 cg_uast_coord_child = (0xf<<(64-4)) | 1;
//if you have a system of analyzers, you need to be able to say
//what analyzer created a node. This can be done with .sysid,
//or you can represent it like this. This allows you to have
//multiple authors.
codegen u64 cg_uast_coord_author = (0xf<<(64-4)) | 2;
//LOGICAL OPS
codegen u64 cg_uast_coord_implies = (0xf<<(64-4)) | 3;
codegen u64 cg_uast_coord_impliesnot = (0xf<<(64-4)) | 4;
//Common AST Node Types
codegen u64 cg_uast_coord_expr_node = (0xf<<(64-4)) | 5;
codegen u64 cg_uast_coord_stmt_node = (0xf<<(64-4)) | 6;
codegen u64 cg_uast_coord_scope_node = (0xf<<(64-4)) | 7;
codegen u64 cg_uast_coord_symdecl_node = (0xf<<(64-4)) | 8;
codegen u64 cg_uast_coord_typedecl_node = (0xf<<(64-4)) | 9;
codegen u64 cg_uast_coord_root_node = (0xf<<(64-4)) | 10;

/*
    RDPARSER RULE TEMPLATES
    
    the following are assumed true:
    
    1. you have a rule called "err" and a string member variable called "errtext"
    2. you have a member variable called "uast" which is a cg_uast
    3. Whatever you want the parsed node parented to is on top
        of the uast's pstack.
    4. there is a rule called `err_on_null` that emits an error if `tok` is null.
    
    TEMPLATE 1: LINEAR SEQUENCE
    
    @linseq[
        myRuleName
        [IDENT] "{" stmts "}" : (testbench_block)
    ]
    A linear sequence may have one "capture"- i.e. a single element
    of the sequence which is dupe'd in the node's udata as a `strll*`.
    
    
    TEMPLATE 2: BINOP
    @binop[
        mybinop lfolded
        rule1 "*" rule2
    ]
*/

fn codegen cgrdparsehook_linseq(cgstrll* in, cg_rd_parser_spec spec)->cgstrll*:
    //
    cgstrll* iwalker;
    iwalker = in;
    i64 capture_element = -1;
    u64 nelems = 0;
    if(in == 0)
        @pprint[
            /   "cgrdparsehook_linseq ERROR!"
            /   "There is nothing in the body of this linseq command!"
            /   "Language name is:"
            /   (spec.name.s)
        ]
        __builtin_exit(1);
    end
    if(in.d != CG_TOK_IDENT)
        @pprint[
            /   "cgrdparsehook_linseq ERROR!"
            /   "Missing identifier for rule name!"
            /   "Language name is:"
            /   (spec.name.s)
            /   "Filename is:"
            /   (iwalker.filename)
            /   "Linenum is:"
            /int(iwalker.linenum)
            /   "Colnum is:"
            /int(iwalker.colnum)
        ]
        __builtin_exit(1);
    end
    //cgstrll* rulename = in:dupe();
    @cg_bldr_initqtok [in.text]
    @cg_bldr_pushqtok "["
    /*
        Create a node to represent ourselves...
    */
    @cg_bldr_pushqtok "cg_uastnode"
    @cg_bldr_pushqtok "me"
    for(iwalker = in.right, iwalker != 0, iwalker = iwalker.right)
        if(iwalker.d == CG_TOK_OPERATOR)
            if(iwalker.text streq ":")
                iwalker = iwalker.right;
                //iwalker:debug_print();
                if(iwalker == 0 || iwalker.d != CG_TOK_OPAREN)
                    @pprint[
                        /   "cgrdparsehook_linseq ERROR!"
                        /   "The syntax of linseq requires a colon followed immediately by an opening parentheses,"
                        /   "which provides an expression evaluating to a u64 which is the UAST coordinate"
                        /   "Of the node type parsed."
                        /   "It must be the entirety of the block after the opening parentheses..."
                    ]
                    __builtin_exit(1);
                end
                break
            end
        end
    end

    @cg_bldr_pushqtok ";"
    @cg_bldr_pushqtok "me"
    @cg_bldr_pushqtok "."
    @cg_bldr_pushqtok "coord"
    @cg_bldr_pushqtok "="
    if(iwalker != 0)
        @cg_bldr_pushtok [iwalker.dupell()]
        @cg_bldr_rwalk_skip ;
    else //it was eating the else!
        @cg_bldr_pushqtok "0"
    end
    //retval:debug_print();

    //@cg_bldr_pushqtok ";"
    @cg_bldr_pushqtok "u64"
    @cg_bldr_pushqtok "nid"
    @cg_bldr_pushqtok "="
    @cg_bldr_pushqtok "this"
    @cg_bldr_pushqtok "."
    @cg_bldr_pushqtok "uast"
    @cg_bldr_pushqtok "."
    @cg_bldr_pushqtok "push_node"
    @cg_bldr_pushqtok "("
    @cg_bldr_pushqtok "me"
    @cg_bldr_pushqtok ")"
    @cg_bldr_pushqtok ";"

    //u64 pid = this.uast.pstack[this.uast.stackptr-1];
    @cg_bldr_pushqtok "u64"
    @cg_bldr_pushqtok "pid"
    @cg_bldr_pushqtok "="
    @cg_bldr_pushqtok "this"
    @cg_bldr_pushqtok "."
    @cg_bldr_pushqtok "uast"
    @cg_bldr_pushqtok "."
    @cg_bldr_pushqtok "pstack"
    @cg_bldr_pushqtok "["
        @cg_bldr_pushqtok "this"
        @cg_bldr_pushqtok "."
        @cg_bldr_pushqtok "uast"
        @cg_bldr_pushqtok "."
        @cg_bldr_pushqtok "stackptr"
        @cg_bldr_pushqtok "-"
        @cg_bldr_pushqtok "1"
    @cg_bldr_pushqtok "]"
    @cg_bldr_pushqtok ";"

        //Push ourselves onto the stack...

    @cg_bldr_pushqtok "this"
    @cg_bldr_pushqtok "."
    @cg_bldr_pushqtok "uast"
    @cg_bldr_pushqtok "."
    @cg_bldr_pushqtok "stackpush"
    @cg_bldr_pushqtok "("
    @cg_bldr_pushqtok "nid"
    @cg_bldr_pushqtok ")"
    @cg_bldr_pushqtok ";"
    //create a link...
    //this.uast.add_link(pid,nid);
    @cg_bldr_pushqtok "this"
    @cg_bldr_pushqtok "."
    @cg_bldr_pushqtok "uast"
    @cg_bldr_pushqtok "."
    @cg_bldr_pushqtok "add_link"
    @cg_bldr_pushqtok "("
        @cg_bldr_pushqtok "pid"
    @cg_bldr_pushqtok ","
        @cg_bldr_pushqtok "nid"
    @cg_bldr_pushqtok ")"
    @cg_bldr_pushqtok ";"
    @cg_bldr_pushqtok "u64"
    @cg_bldr_pushqtok "cid" //for future use...
    @cg_bldr_pushqtok ";"
    @cg_bldr_pushqtok "u64"
    @cg_bldr_pushqtok "stack_checker" //for future use...
    @cg_bldr_pushqtok ";"
    //begin parsing rules...
    for(iwalker = in.right, iwalker != 0, iwalker = iwalker.right)
        //before we do anything, make sure that this isn't null...
        if(iwalker.d == CG_TOK_OPERATOR && iwalker.text streq ":")
            break
        end
        @cg_bldr_pushqtok ";"
        @cg_bldr_pushqtok "do"
        @cg_bldr_pushqtok "err_on_null"
        @cg_bldr_pushqtok ";"
        if(iwalker.d == CG_TOK_OBRACK)
            if(capture_element != -1)
                @pprint[
                    /   "cgrdparsehook_linseq ERROR!"
                    /   "Cannot have multiple captures in linseq!"
                    /   "Language name is:"
                    /   (spec.name.s)
                    /   "Filename is:"
                    /   (iwalker.filename)
                    /   "Linenum is:"
                    /int(iwalker.linenum)
                    /   "Colnum is:"
                    /int(iwalker.colnum)
                ]
                __builtin_exit(1);
            end
            iwalker = iwalker.right;
            if(iwalker == 0)
                @pprint[
                    /   "cgrdparsehook_linseq ERROR!"
                    /   "Unmatched brackets!"
                    /   "Prematurely reached end of sequence."
                    /   "Should be impossible!!!!"
                    /   "Language name is:"
                    /   (spec.name.s)
                ]
                __builtin_exit(1);
            end
            if(iwalker.d != CG_TOK_IDENT)
                @pprint[
                    /   "cgrdparsehook_linseq ERROR!"
                    /   "Missing identifier inside of Capture!"
                    /   "Valid captures are [IDENT], [STRING], [INT], [FLOAT], [NUM]"
                    /   "Language name is:"
                    /   (spec.name.s)
                    /   "Filename is:"
                    /   (iwalker.filename)
                    /   "Linenum is:"
                    /int(iwalker.linenum)
                    /   "Colnum is:"
                    /int(iwalker.colnum)
                ]
                __builtin_exit(1);
            end
            /*
                TODO: Write code to actually perform the capture...
            */
            capture_element = nelems;
            if(iwalker.text streq "IDENT")
                //ensure that this is an identifier...
                @cg_bldr_pushqtok "if"
                @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "("
                        @cg_bldr_pushqtok "tok"
                        @cg_bldr_pushqtok "."
                        @cg_bldr_pushqtok "d"
                        @cg_bldr_pushqtok "!="
                        @cg_bldr_pushqtok "CG_TOK_IDENT"
                    @cg_bldr_pushqtok ")"
                        @cg_bldr_pushqtok "&&"
                    @cg_bldr_pushqtok "("
                        @cg_bldr_pushqtok "tok"
                        @cg_bldr_pushqtok "."
                        @cg_bldr_pushqtok "d"
                        @cg_bldr_pushqtok "!="
                        @cg_bldr_pushqtok "CG_TOK_KEYWORD"
                    @cg_bldr_pushqtok ")"
                @cg_bldr_pushqtok ")"
                    @cg_bldr_pushqtok "this"    
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "errtext"
                    @cg_bldr_pushqtok "="
                    /*
                        Craft an error message...
                    */
                    if(1)
                        cgstr errtext
                        cgstr tmp
                        errtext.fromstr("\"Language ");
                        tmp.s = spec.name.s;
                        errtext.add(tmp);
                        tmp.s = " Parse Error! Expected IDENTIFIER or KEYWORD!";
                        errtext.add(tmp);
                        @cg_bldr_pushqtok [errtext.s]
                        errtext.free();
                    end
                    @cg_bldr_pushqtok ";"
                    @cg_bldr_pushqtok "go"
                    @cg_bldr_pushqtok "err"
                @cg_bldr_pushqtok "end"

            elif(iwalker.text streq "STRING")
                @cg_bldr_pushqtok "if"
                @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "!="
                    @cg_bldr_pushqtok "CG_TOK_STRING"
                @cg_bldr_pushqtok ")"
                    @cg_bldr_pushqtok "this"    
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "errtext"
                    @cg_bldr_pushqtok "="
                    /*
                        Craft an error message...
                    */
                    if(1)
                        cgstr errtext
                        cgstr tmp
                        errtext.fromstr("\"Language ");
                        tmp.s = spec.name.s;
                        errtext.add(tmp);
                        tmp.s = " Parse Error! Expected STRING! ";
                        errtext.add(tmp);
                        @cg_bldr_pushqtok [errtext.s]
                        errtext.free();
                    end
                    @cg_bldr_pushqtok ";"
                    @cg_bldr_pushqtok "go"
                    @cg_bldr_pushqtok "err"
                @cg_bldr_pushqtok "end"
            elif(iwalker.text streq "INT")
                @cg_bldr_pushqtok "if"
                @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "!="
                    @cg_bldr_pushqtok "CG_TOK_INT_CONST"
                @cg_bldr_pushqtok ")"
                    @cg_bldr_pushqtok "this"    
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "errtext"
                    @cg_bldr_pushqtok "="
                    /*
                        Craft an error message...
                    */
                    if(1)
                        cgstr errtext
                        cgstr tmp
                        errtext.fromstr("\"Language ");
                        tmp.s = spec.name.s;
                        errtext.add(tmp);
                        tmp.s = " Parse Error! Expected INTEGER LITERAL! ";
                        errtext.add(tmp);
                        @cg_bldr_pushqtok [errtext.s]
                        errtext.free();
                    end
                    @cg_bldr_pushqtok ";"
                    @cg_bldr_pushqtok "go"
                    @cg_bldr_pushqtok "err"
                @cg_bldr_pushqtok "end"
            elif(iwalker.text streq "FLOAT")
                @cg_bldr_pushqtok "if"
                @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "tok"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "d"
                    @cg_bldr_pushqtok "!="
                    @cg_bldr_pushqtok "CG_TOK_FLOAT_CONST"
                @cg_bldr_pushqtok ")"
                    @cg_bldr_pushqtok "this"    
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "errtext"
                    @cg_bldr_pushqtok "="
                    /*
                        Craft an error message...
                    */
                    if(1)
                        cgstr errtext
                        cgstr tmp
                        errtext.fromstr("\"Language ");
                        tmp.s = spec.name.s;
                        errtext.add(tmp);
                        tmp.s = " Parse Error! Expected FLOAT LITERAL! ";
                        errtext.add(tmp);
                        @cg_bldr_pushqtok [errtext.s]
                        errtext.free();
                    end
                    @cg_bldr_pushqtok ";"
                    @cg_bldr_pushqtok "go"
                    @cg_bldr_pushqtok "err"
                @cg_bldr_pushqtok "end"
            elif(iwalker.text streq "NUM")
                @cg_bldr_pushqtok "if"
                @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "("
                        @cg_bldr_pushqtok "tok"
                        @cg_bldr_pushqtok "."
                        @cg_bldr_pushqtok "d"
                        @cg_bldr_pushqtok "!="
                        @cg_bldr_pushqtok "CG_TOK_FLOAT_CONST"
                    @cg_bldr_pushqtok ")"
                    @cg_bldr_pushqtok "&&"
                    @cg_bldr_pushqtok "("
                        @cg_bldr_pushqtok "tok"
                        @cg_bldr_pushqtok "."
                        @cg_bldr_pushqtok "d"
                        @cg_bldr_pushqtok "!="
                        @cg_bldr_pushqtok "CG_TOK_INT_CONST"
                    @cg_bldr_pushqtok ")"
                @cg_bldr_pushqtok ")"
                    @cg_bldr_pushqtok "this"    
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "errtext"
                    @cg_bldr_pushqtok "="
                    /*
                        Craft an error message...
                    */
                    if(1)
                        cgstr errtext
                        cgstr tmp
                        errtext.fromstr("\"Language ");
                        tmp.s = spec.name.s;
                        errtext.add(tmp);
                        tmp.s = " Parse Error! Expected NUMBER LITERAL! ";
                        errtext.add(tmp);
                        @cg_bldr_pushqtok [errtext.s]
                        errtext.free();
                    end
                    @cg_bldr_pushqtok ";"
                    @cg_bldr_pushqtok "go"
                    @cg_bldr_pushqtok "err"
                @cg_bldr_pushqtok "end"
            else
                @pprint[
                    /   "cgrdparsehook_linseq ERROR!"
                    /   "Invalid identifier inside of Capture!"
                    /   "Valid captures are [IDENT], [STRING], [INT], [FLOAT], [NUM]"
                    /   "You may not capture a literal token."
                    /   "Language name is:"
                    /   (spec.name.s)
                    /   "Filename is:"
                    /   (iwalker.filename)
                    /   "Linenum is:"
                    /int(iwalker.linenum)
                    /   "Colnum is:"
                    /int(iwalker.colnum)
                ]
                __builtin_exit(1);
            end
            @cg_bldr_pushqtok "this"
            @cg_bldr_pushqtok "."
            @cg_bldr_pushqtok "uast"
            @cg_bldr_pushqtok "."
            @cg_bldr_pushqtok "nodes"
            @cg_bldr_pushqtok "["
                @cg_bldr_pushqtok "nid"
            @cg_bldr_pushqtok "]"
            @cg_bldr_pushqtok "."
            @cg_bldr_pushqtok "udata"
            @cg_bldr_pushqtok "="
            @cg_bldr_pushqtok "cast"
            @cg_bldr_pushqtok "("
            @cg_bldr_pushqtok "u8"
            @cg_bldr_pushqtok "*"
            @cg_bldr_pushqtok ")"
            @cg_bldr_pushqtok "tok"
            @cg_bldr_pushqtok "."
            @cg_bldr_pushqtok "dupe"
            @cg_bldr_pushqtok "("
            @cg_bldr_pushqtok ")"
            @cg_bldr_pushqtok ";"
            @cg_bldr_pushqtok "eat" //consume the token!

            iwalker = iwalker.right;
            if(iwalker == 0)
                @pprint[
                    /   "cgrdparsehook_linseq ERROR!"
                    /   "Unmatched brackets!"
                    /   "Prematurely reached end of sequence."
                    /   "Should be impossible!!!!"
                    /   "Language name is:"
                    /   (spec.name.s)
                ]
                __builtin_exit(1);
            end
            if(iwalker.d != CG_TOK_CBRACK)
                @pprint[
                    /   "cgrdparsehook_linseq ERROR!"
                    /   "Missing closing square bracket!"
                    /   "Language name is:"
                    /   (spec.name.s)
                    /   "Filename is:"
                    /   (iwalker.filename)
                    /   "Linenum is:"
                    /int(iwalker.linenum)
                    /   "Colnum is:"
                    /int(iwalker.colnum)
                ]
                __builtin_exit(1);
            end
            nelems++

            continue
        end //eof capture...
        if(iwalker.d == CG_TOK_STRING)
            //A literal token is to be matched...
            @cg_bldr_pushqtok "match"
            @cg_bldr_pushqtok "["
            @cg_bldr_pushqtok "["
                @cg_bldr_pushtok [iwalker:dupe()]
            @cg_bldr_pushqtok "]"
                /*
                    TODO: put code here to handle matching this token...
                */
            @cg_bldr_pushqtok "eat" //just eat it lol....

            @cg_bldr_pushqtok "else"
                //TODO: put code here to handle not finding this thing...
                @cg_bldr_pushqtok "this"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "errtext"
                @cg_bldr_pushqtok "="
                /*
                    Craft an error message...
                */
                if(1)
                    cgstr errtext
                    cgstr tmp
                    errtext.fromstr("\"Language ");
                    tmp.s = spec.name.s;
                    errtext.add(tmp);
                    tmp.s = " Parse Error! Expected: ";
                    errtext.add(tmp);
                    tmp.s = iwalker.text;
                    errtext.add(tmp);
                    tmp.s = " But did not find it!\"";
                    errtext.add(tmp);
                    @cg_bldr_pushqtok [errtext.s]
                    errtext.free();
                end
                @cg_bldr_pushqtok ";"
                @cg_bldr_pushqtok "go"
                @cg_bldr_pushqtok "err"
            @cg_bldr_pushqtok "]"
            
        elif(iwalker.d == CG_TOK_IDENT)
            if(
                iwalker.text streq "IDENT" ||
                iwalker.text streq "STRING" ||
                iwalker.text streq "INT" ||
                iwalker.text streq "FLOAT" ||
                iwalker.text streq "NUM"
            )
                @pprint[
                    /   "cgrdparsehook_linseq ERROR!"
                    /   "You may not have IDENT, STRING, INT, FLOAT, or NUM"
                    /   "Unless they are being captured!"
                    /   "That means they must be written inside of square brackets!"
                ]
                __builtin_exit(1);
            end
            //this is a rule...
            u64 rule_eval_mode = 0;
            //check for the presence of the ^ which indicates that this rule will leave itself on
            //the stack, for parenting onto the current node.
            if(iwalker.right != 0 && iwalker.right.d == CG_TOK_OPERATOR && iwalker.right.text streq "^")
                iwalker = iwalker.right;
                rule_eval_mode = 1;
            end
            //save the stack pointer into stack_checker...
            
            //mode 0
                @cg_bldr_pushqtok "stack_checker"
                @cg_bldr_pushqtok "="
                @cg_bldr_pushqtok "this"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "uast"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "stackptr"
                @cg_bldr_pushqtok ";"
            //do the rule...
            @cg_bldr_pushqtok "do"
            @cg_bldr_pushtok [iwalker:dupe()]
            //verify stack has changed by exactly one...

            @cg_bldr_pushqtok "if"
            @cg_bldr_pushqtok "("
                @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "this"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "uast"
                    @cg_bldr_pushqtok "."
                    @cg_bldr_pushqtok "stackptr"
                if(rule_eval_mode)
                    @cg_bldr_pushqtok "-"
                    @cg_bldr_pushqtok "1"
                end
                @cg_bldr_pushqtok ")"
                @cg_bldr_pushqtok "!="
                @cg_bldr_pushqtok "stack_checker"
            @cg_bldr_pushqtok ")"
            
                @cg_bldr_pushqtok "this"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "errtext"
                @cg_bldr_pushqtok "="
                /*
                    Craft an error message...
                */
                if(1)
                    cgstr errtext
                    cgstr tmp
                    errtext.fromstr("\"Language ");
                    tmp.s = spec.name.s;
                    errtext.add(tmp);
                    tmp.s = " __Internal__ Parse Error! Rule ";
                    errtext.add(tmp);
                    tmp.s = iwalker.text;
                    errtext.add(tmp);
                    tmp.s = " violated stack rules! Ask compiler author to fix!\"";
                    errtext.add(tmp);
                    @cg_bldr_pushqtok [errtext.s]
                    errtext.free();
                end
                @cg_bldr_pushqtok ";"
                @cg_bldr_pushqtok "go"
                @cg_bldr_pushqtok "err"
            
            
            @cg_bldr_pushqtok "end"
            if(rule_eval_mode)
                //the stack _has_ changed by exactly one, pop it off!
                @cg_bldr_pushqtok "cid"
                @cg_bldr_pushqtok "="
                @cg_bldr_pushqtok "this"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "uast"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "stackpop"
                @cg_bldr_pushqtok "("
                @cg_bldr_pushqtok ")"
                @cg_bldr_pushqtok ";"
                
                //parent it to ourselves...
                @cg_bldr_pushqtok "this"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "uast"
                @cg_bldr_pushqtok "."
                @cg_bldr_pushqtok "add_link"
                @cg_bldr_pushqtok "("
                    @cg_bldr_pushqtok "nid"
                    @cg_bldr_pushqtok ","
                    @cg_bldr_pushqtok "cid"
                @cg_bldr_pushqtok ")"
                @cg_bldr_pushqtok ";"
            end
        else
            @pprint[
                /   "cgrdparsehook_linseq ERROR!"
                /   "Invalid sequence item!"
                /   "Language name is:"
                /   (spec.name.s)
                /   "Filename is:"
                /   (iwalker.filename)
                /   "Linenum is:"
                /int(iwalker.linenum)
                /   "Colnum is:"
                /int(iwalker.colnum)
            ]
            __builtin_exit(1);
        end
        /*
            Does anything need to go here?
        */
        nelems++
        continue
    end
    if(nelems == 0)
        @pprint[
            /   "cgrdparsehook_linseq ERROR!"
            /   "Empty linseq!"
            /   "Language name is:"
            /   (spec.name.s)
        ]
        __builtin_exit(1)
    end
    if(iwalker != 0 && iwalker.d == CG_TOK_OPERATOR && iwalker.text streq ":")
        //perform a validation of the expression after it.
        iwalker = iwalker.right;
        if(iwalker.d != CG_TOK_OPAREN)
            @pprint[
                /   "cgrdparsehook_linseq ERROR!"
                /   "Expression evaluating to coordinate does not begin with opening parenthesis!"
                /   "Language name is:"
                /   (spec.name.s)
            ]
            __builtin_exit(1)
        end
        while(iwalker.right != 0) iwalker = iwalker.right end
        if(iwalker.d != CG_TOK_CPAREN)
            @pprint[
                /   "cgrdparsehook_linseq ERROR!"
                /   "Expression evaluating to coordinate does not end with a closing parenthesis!"
                /   "Language name is:"
                /   (spec.name.s)
            ]
            __builtin_exit(1)
        end
    end
        //pop ourselves off the stack...
        @cg_bldr_pushqtok "this"
        @cg_bldr_pushqtok "."
        @cg_bldr_pushqtok "uast"
        @cg_bldr_pushqtok "."
        @cg_bldr_pushqtok "stackpop"
        @cg_bldr_pushqtok "("
        @cg_bldr_pushqtok ")"
        @cg_bldr_pushqtok ";"
    
    @cg_bldr_pushqtok "]"
    in:freelist();
    return retval;
end

