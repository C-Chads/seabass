
/*
    CODE GENERATOR TOOLS
    
    Tools for writing code generators and
    optimizing the AST.
    
    TOOL 1- cg_optimizer_constant_swap
        Optimizies the order of certain commutative
        operations so that register allocation
        will be more efficient.
    
    
    
    
    
    FOR(X,Y,Z)
        W
    end
    
    turns into...
    
    X
    :COND
    gotoif(!Y) -> PAST
    W
    Z
    goto COND
    :PAST
    
    While is simpler....
    while(X)
        Y
    end
    
    :COND
    gotoif(!X) -> PAST
    Y
    goto COND
    :PAST
    
*/
#guard seabass_codegen_tools

#include <stdmeta/reflect.hbas>


fn codegen cgir_kind_is_terminal_or_unary(int kind)->i64:
    return (
        kind == CG_EXPR_LSYM ||
        kind == CG_EXPR_CAST ||
        kind == CG_EXPR_NEG ||
        kind == CG_EXPR_COMPL ||
        kind == CG_EXPR_NOT ||
        kind == CG_EXPR_PRE_INCR ||
        kind == CG_EXPR_PRE_DECR ||
        //post incr and post decr require
        //slightly more assembly, but
        //we still want to re-order if we can...
        kind == CG_EXPR_POST_INCR ||
        kind == CG_EXPR_POST_DECR ||
        kind == CG_EXPR_GSYM ||
        kind == CG_EXPR_SIZEOF ||
        kind == CG_EXPR_INTLIT ||
        kind == CG_EXPR_FLOATLIT ||
        kind == CG_EXPR_STRINGLIT ||
        kind == CG_EXPR_CONSTEXPR_FLOAT ||
        kind == CG_EXPR_CONSTEXPR_INT ||
        kind == CG_EXPR_GETGLOBALPTR ||
        kind == CG_EXPR_GETFNPTR
    );
end

//constant swap- used to opimize fifth codegen....
//this ensures register allocation is more efficient...
fn codegen cg_optimizer_operand_swap(
    cgexpr_node ee
):
    i64 i
    for(i = 0, i < CG_MAX_FARGS, i++)
        if(ee.subnodes[i] == 0) continue end
        cg_optimizer_operand_swap(ee.subnodes[i]);
    end
    //only commutative operations....
    if(
        !(
            ee.kind == CG_EXPR_EQ ||
            ee.kind == CG_EXPR_NEQ ||
            ee.kind == CG_EXPR_STREQ ||
            ee.kind == CG_EXPR_STRNEQ ||
            ee.kind == CG_EXPR_ADD ||
            ee.kind == CG_EXPR_MUL ||
            ee.kind == CG_EXPR_BITAND ||
            ee.kind == CG_EXPR_BITXOR ||
            ee.kind == CG_EXPR_BITOR
        )
    )
        return
    end
    u64 l_is_terminal = cgir_kind_is_terminal_or_unary(ee.subnodes[0].kind);
    u64 r_is_terminal = cgir_kind_is_terminal_or_unary(ee.subnodes[1].kind);
    if(!r_is_terminal && l_is_terminal)
        cgexpr_node* q = ee.subnodes[0];
        ee.subnodes[0] = ee.subnodes[1];
        ee.subnodes[1] = q;
    end

end









//perform a bottom-level swap between two nodes
//based on their constant-ness...





